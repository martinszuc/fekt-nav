function [methodinfo,structs,enuminfo,ThunkLibName]=detect_mx
%DETECT_MX Create structures to define interfaces found in 'detect'.

%This function was generated by loadlibrary.m parser version 1.1.6.35 on Tue Apr  2 11:41:05 2019
%perl options:'detect.i -outfile=detect_mx.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% void _stdcall CPUname ( unsigned char * a ); 
fcns.name{fcnNum}='CPUname'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% int _stdcall CPUsign (); 
fcns.name{fcnNum}='CPUsign'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall EM64Tsupport (); 
fcns.name{fcnNum}='EM64Tsupport'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall MMXsupport (); 
fcns.name{fcnNum}='MMXsupport'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall SSEsupport (); 
fcns.name{fcnNum}='SSEsupport'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall SSE2support (); 
fcns.name{fcnNum}='SSE2support'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall SSE3support (); 
fcns.name{fcnNum}='SSE3support'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall SSSE3support (); 
fcns.name{fcnNum}='SSSE3support'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall SSE41support (); 
fcns.name{fcnNum}='SSE41support'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall SSE42support (); 
fcns.name{fcnNum}='SSE42support'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall AVXsupport (); 
fcns.name{fcnNum}='AVXsupport'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall AVX2support (); 
fcns.name{fcnNum}='AVX2support'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall FMA3support (); 
fcns.name{fcnNum}='FMA3support'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall AESsupport (); 
fcns.name{fcnNum}='AESsupport'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall VAESsupport (); 
fcns.name{fcnNum}='VAESsupport'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall CLMULsupport (); 
fcns.name{fcnNum}='CLMULsupport'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall VCLMULsupport (); 
fcns.name{fcnNum}='VCLMULsupport'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall SHAsupport (); 
fcns.name{fcnNum}='SHAsupport'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall cTold (); 
fcns.name{fcnNum}='cTold'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall cTpCintel (); 
fcns.name{fcnNum}='cTpCintel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall cTintel (); 
fcns.name{fcnNum}='cTintel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall cTpCintelnew (); 
fcns.name{fcnNum}='cTpCintelnew'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall cTintelnew (); 
fcns.name{fcnNum}='cTintelnew'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall THRnumber (); 
fcns.name{fcnNum}='THRnumber'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
methodinfo=fcns;